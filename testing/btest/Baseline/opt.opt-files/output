### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
zeek_init
{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::ROOT::DLT_EN10MB, PacketAnalyzer::ANALYZER_ETHERNET);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::ROOT::DLT_FDDI, PacketAnalyzer::ANALYZER_FDDI);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::ROOT::DLT_IEEE802_11, PacketAnalyzer::ANALYZER_IEEE802_11);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::ROOT::DLT_IEEE802_11_RADIO, PacketAnalyzer::ANALYZER_IEEE802_11_RADIO);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::ROOT::DLT_LINUX_SLL, PacketAnalyzer::ANALYZER_LINUXSLL);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::ROOT::DLT_NFLOG, PacketAnalyzer::ANALYZER_NFLOG);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IP, PacketAnalyzer::IP::IPPROTO_IPIP, PacketAnalyzer::ANALYZER_IPTUNNEL);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IP, PacketAnalyzer::IP::IPPROTO_IPV6, PacketAnalyzer::ANALYZER_IPTUNNEL);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IP, PacketAnalyzer::IP::IPPROTO_GRE, PacketAnalyzer::ANALYZER_GRE);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IP, PacketAnalyzer::IP::IPPROTO_TCP, PacketAnalyzer::ANALYZER_TCP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IP, PacketAnalyzer::IP::IPPROTO_UDP, PacketAnalyzer::ANALYZER_UDP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IP, PacketAnalyzer::IP::IPPROTO_ICMP, PacketAnalyzer::ANALYZER_ICMP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IP, PacketAnalyzer::IP::IPPROTO_ICMP6, PacketAnalyzer::ANALYZER_ICMP);
Option::set_change_handler(ignore_checksums_nets, to_any_coercePacketAnalyzer::IP::analyzer_option_change_ignore_checksums_nets, (coerce 5 to int));
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 34887, PacketAnalyzer::ANALYZER_MPLS);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 2048, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 34525, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 2054, PacketAnalyzer::ANALYZER_ARP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 32821, PacketAnalyzer::ANALYZER_ARP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 33024, PacketAnalyzer::ANALYZER_VLAN);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 34984, PacketAnalyzer::ANALYZER_VLAN);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 37120, PacketAnalyzer::ANALYZER_VLAN);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 34916, PacketAnalyzer::ANALYZER_PPPOE);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ETHERNET, 35110, PacketAnalyzer::ANALYZER_VNTAG);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IEEE802_11, 2048, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IEEE802_11, 34525, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IEEE802_11, 2054, PacketAnalyzer::ANALYZER_ARP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IEEE802_11, 32821, PacketAnalyzer::ANALYZER_ARP);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_IEEE802_11_RADIO, PacketAnalyzer::IEEE802_11_RADIO::DLT_IEEE802_11, PacketAnalyzer::ANALYZER_IEEE802_11);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_LINUXSLL, 2048, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_LINUXSLL, 34525, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_LINUXSLL, 2054, PacketAnalyzer::ANALYZER_ARP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_LINUXSLL, 32821, PacketAnalyzer::ANALYZER_ARP);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_NFLOG, PacketAnalyzer::NFLOG::AF_INET, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_NFLOG, PacketAnalyzer::NFLOG::AF_INET6, PacketAnalyzer::ANALYZER_IP);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::NULL::DLT_NULL, PacketAnalyzer::ANALYZER_NULL);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_NULL, 2, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_NULL, 24, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_NULL, 28, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_NULL, 30, PacketAnalyzer::ANALYZER_IP);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_ROOT, PacketAnalyzer::PPP_SERIAL::DLT_PPP_SERIAL, PacketAnalyzer::ANALYZER_PPPSERIAL);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_PPPSERIAL, 641, PacketAnalyzer::ANALYZER_MPLS);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_PPPSERIAL, 33, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_PPPSERIAL, 87, PacketAnalyzer::ANALYZER_IP);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_PPPOE, 33, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_PPPOE, 87, PacketAnalyzer::ANALYZER_IP);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VLAN, 34887, PacketAnalyzer::ANALYZER_MPLS);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VLAN, 2048, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VLAN, 34525, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VLAN, 2054, PacketAnalyzer::ANALYZER_ARP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VLAN, 32821, PacketAnalyzer::ANALYZER_ARP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VLAN, 33024, PacketAnalyzer::ANALYZER_VLAN);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VLAN, 34916, PacketAnalyzer::ANALYZER_PPPOE);
}{ 
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VNTAG, 33024, PacketAnalyzer::ANALYZER_VLAN);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VNTAG, 34984, PacketAnalyzer::ANALYZER_VLAN);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_VNTAG, 37120, PacketAnalyzer::ANALYZER_VLAN);
}{ 
PacketAnalyzer::register_protocol_detection(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_AYIYA);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_AYIYA, PacketAnalyzer::AYIYA::IPPROTO_IPV4, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_AYIYA, PacketAnalyzer::AYIYA::IPPROTO_IPV6, PacketAnalyzer::ANALYZER_IP);
PacketAnalyzer::register_for_ports(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_AYIYA, PacketAnalyzer::AYIYA::ayiya_ports);
}{ 
PacketAnalyzer::register_for_ports(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_GENEVE, PacketAnalyzer::Geneve::geneve_ports);
PacketAnalyzer::register_packet_analyzer(PacketAnalyzer::ANALYZER_GENEVE, 25944, PacketAnalyzer::ANALYZER_ETHERNET);
}{ 
PacketAnalyzer::register_for_ports(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_VXLAN, PacketAnalyzer::VXLAN::vxlan_ports);
}{ 
PacketAnalyzer::register_protocol_detection(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_TEREDO);
PacketAnalyzer::register_for_ports(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_TEREDO, PacketAnalyzer::TEREDO::teredo_ports);
}{ 
PacketAnalyzer::register_protocol_detection(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_GTPV1);
PacketAnalyzer::register_for_ports(PacketAnalyzer::ANALYZER_UDP, PacketAnalyzer::ANALYZER_GTPV1, PacketAnalyzer::GTPV1::gtpv1_ports);
}{ 
if (Supervisor::is_supervisor() && SupervisorControl::enable_listen) 
{ 
Broker::listen(Broker::default_listen_address, Broker::default_port, Broker::default_listen_retry);
}

Broker::subscribe(SupervisorControl::topic_prefix);
}{ 
<init> Site::cidr;
{ 
Site::local_dns_suffix_regex = set_to_regex(Site::local_zones, (^\.?|\.)(~~)$);
Site::local_dns_neighbor_suffix_regex = set_to_regex(Site::neighbor_zones, (^\.?|\.)(~~)$);
for ([Site::cidr] in Site::local_nets) 
Site::local_nets_table[Site::cidr] = Site::cidr;

}
}{ 
<init> Analyzer::a;
{ 
if (Analyzer::disable_all) 
Analyzer::__disable_all_analyzers();

for ([Analyzer::a] in Analyzer::disabled_analyzers) 
Analyzer::disable_analyzer(Analyzer::a);

}
}{ 
if (Log::REDIRECT_NONE != Log::print_to_log) 
Log::create_stream(Log::PRINTLOG, (coerce [$columns=Log::PrintLogInfo, $ev=Log::log_print, $path=Log::print_log_path] to record { columns:any; ev:any &optional; path:string &optional; policy:hook(rec:any; id:enum Log::ID; filter:record { name:string; writer:enum Log::Writer &default=Log::default_writer, &optional; path:string &optional; path_func:function(id:enum Log::ID; path:string; rec:any;) : string &optional; include:set[string] &optional; exclude:set[string] &optional; log_local:bool &default=Log::enable_local_logging, &optional; log_remote:bool &default=Log::enable_remote_logging, &optional; field_name_map:table[string] of string &default=Log::default_field_name_map, &optional; scope_sep:string &default=Log::default_scope_sep, &optional; ext_prefix:string &default=Log::default_ext_prefix, &optional; ext_func:function(path:string;) : any &default=Log::default_ext_func, &optional; interv:interval &default=Log::default_rotation_interval, &optional; postprocessor:function(info:record { writer:enum Log::Writer; fname:string; path:string; open:time; close:time; terminating:bool; };) : bool &optional; config:table[string] of string &default=(coerce table() to table[string] of string), &optional; policy:hook(rec:any; id:enum Log::ID; filter:<recursion>;) : bool &optional; };) : bool &optional; }));

}{ 
Log::create_stream(Broker::LOG, (coerce [$columns=Broker::Info, $path=broker, $policy=Broker::log_policy] to record { columns:any; ev:any &optional; path:string &optional; policy:hook(rec:any; id:enum Log::ID; filter:record { name:string; writer:enum Log::Writer &default=Log::default_writer, &optional; path:string &optional; path_func:function(id:enum Log::ID; path:string; rec:any;) : string &optional; include:set[string] &optional; exclude:set[string] &optional; log_local:bool &default=Log::enable_local_logging, &optional; log_remote:bool &default=Log::enable_remote_logging, &optional; field_name_map:table[string] of string &default=Log::default_field_name_map, &optional; scope_sep:string &default=Log::default_scope_sep, &optional; ext_prefix:string &default=Log::default_ext_prefix, &optional; ext_func:function(path:string;) : any &default=Log::default_ext_func, &optional; interv:interval &default=Log::default_rotation_interval, &optional; postprocessor:function(info:record { writer:enum Log::Writer; fname:string; path:string; open:time; close:time; terminating:bool; };) : bool &optional; config:table[string] of string &default=(coerce table() to table[string] of string), &optional; policy:hook(rec:any; id:enum Log::ID; filter:<recursion>;) : bool &optional; };) : bool &optional; }));
}{ 
Log::create_stream(Files::LOG, (coerce [$columns=Files::Info, $ev=Files::log_files, $path=files, $policy=Files::log_policy] to record { columns:any; ev:any &optional; path:string &optional; policy:hook(rec:any; id:enum Log::ID; filter:record { name:string; writer:enum Log::Writer &default=Log::default_writer, &optional; path:string &optional; path_func:function(id:enum Log::ID; path:string; rec:any;) : string &optional; include:set[string] &optional; exclude:set[string] &optional; log_local:bool &default=Log::enable_local_logging, &optional; log_remote:bool &default=Log::enable_remote_logging, &optional; field_name_map:table[string] of string &default=Log::default_field_name_map, &optional; scope_sep:string &default=Log::default_scope_sep, &optional; ext_prefix:string &default=Log::default_ext_prefix, &optional; ext_func:function(path:string;) : any &default=Log::default_ext_func, &optional; interv:interval &default=Log::default_rotation_interval, &optional; postprocessor:function(info:record { writer:enum Log::Writer; fname:string; path:string; open:time; close:time; terminating:bool; };) : bool &optional; config:table[string] of string &default=(coerce table() to table[string] of string), &optional; policy:hook(rec:any; id:enum Log::ID; filter:<recursion>;) : bool &optional; };) : bool &optional; }));
}{ 
schedule Broker::log_batch_interval {
Broker::log_flush()
};
Broker::update_metrics_export_interval(Broker::metrics_export_interval, Broker::metrics_export_interval);
Option::set_change_handler(Broker::metrics_export_interval, to_any_coerceBroker::update_metrics_export_interval, (coerce 0 to int));
Broker::update_metrics_export_topic(Broker::metrics_export_topic, Broker::metrics_export_topic);
Option::set_change_handler(Broker::metrics_export_topic, to_any_coerceBroker::update_metrics_export_topic, (coerce 0 to int));
Broker::update_metrics_export_endpoint_name(Broker::metrics_export_endpoint_name, Broker::metrics_export_endpoint_name);
Option::set_change_handler(Broker::metrics_export_endpoint_name, to_any_coerceBroker::update_metrics_export_endpoint_name, (coerce 0 to int));
Broker::update_metrics_export_prefixes(Broker::metrics_export_prefixes, Broker::metrics_export_prefixes);
Option::set_change_handler(Broker::metrics_export_prefixes, to_any_coerceBroker::update_metrics_export_prefixes, (coerce 0 to int));
}ZAM-code zeek_init 
