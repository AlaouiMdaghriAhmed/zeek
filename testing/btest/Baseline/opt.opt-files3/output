### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
zeek_init
ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init ZAM-code zeek_init { 
if (Supervisor::is_supervisor() && SupervisorControl::enable_listen) 
{ 
Broker::listen(Broker::default_listen_address, Broker::default_port, Broker::default_listen_retry);
}

Broker::subscribe(SupervisorControl::topic_prefix);
}{ 
<init> Site::cidr;
{ 
Site::local_dns_suffix_regex = set_to_regex(Site::local_zones, (^\.?|\.)(~~)$);
Site::local_dns_neighbor_suffix_regex = set_to_regex(Site::neighbor_zones, (^\.?|\.)(~~)$);
for ([Site::cidr] in Site::local_nets) 
Site::local_nets_table[Site::cidr] = Site::cidr;

}
}{ 
<init> Analyzer::a;
{ 
if (Analyzer::disable_all) 
Analyzer::__disable_all_analyzers();

for ([Analyzer::a] in Analyzer::disabled_analyzers) 
Analyzer::disable_analyzer(Analyzer::a);

}
}{ 
if (Log::REDIRECT_NONE != Log::print_to_log) 
Log::create_stream(Log::PRINTLOG, (coerce [$columns=Log::PrintLogInfo, $ev=Log::log_print, $path=Log::print_log_path] to record { columns:any; ev:any &optional; path:string &optional; policy:hook(rec:any; id:enum Log::ID; filter:record { name:string; writer:enum Log::Writer &default=Log::default_writer, &optional; path:string &optional; path_func:function(id:enum Log::ID; path:string; rec:any;) : string &optional; include:set[string] &optional; exclude:set[string] &optional; log_local:bool &default=Log::enable_local_logging, &optional; log_remote:bool &default=Log::enable_remote_logging, &optional; field_name_map:table[string] of string &default=Log::default_field_name_map, &optional; scope_sep:string &default=Log::default_scope_sep, &optional; ext_prefix:string &default=Log::default_ext_prefix, &optional; ext_func:function(path:string;) : any &default=Log::default_ext_func, &optional; interv:interval &default=Log::default_rotation_interval, &optional; postprocessor:function(info:record { writer:enum Log::Writer; fname:string; path:string; open:time; close:time; terminating:bool; };) : bool &optional; config:table[string] of string &default=(coerce table() to table[string] of string), &optional; policy:hook(rec:any; id:enum Log::ID; filter:<recursion>;) : bool &optional; };) : bool &optional; }));

}{ 
Log::create_stream(Broker::LOG, (coerce [$columns=Broker::Info, $path=broker, $policy=Broker::log_policy] to record { columns:any; ev:any &optional; path:string &optional; policy:hook(rec:any; id:enum Log::ID; filter:record { name:string; writer:enum Log::Writer &default=Log::default_writer, &optional; path:string &optional; path_func:function(id:enum Log::ID; path:string; rec:any;) : string &optional; include:set[string] &optional; exclude:set[string] &optional; log_local:bool &default=Log::enable_local_logging, &optional; log_remote:bool &default=Log::enable_remote_logging, &optional; field_name_map:table[string] of string &default=Log::default_field_name_map, &optional; scope_sep:string &default=Log::default_scope_sep, &optional; ext_prefix:string &default=Log::default_ext_prefix, &optional; ext_func:function(path:string;) : any &default=Log::default_ext_func, &optional; interv:interval &default=Log::default_rotation_interval, &optional; postprocessor:function(info:record { writer:enum Log::Writer; fname:string; path:string; open:time; close:time; terminating:bool; };) : bool &optional; config:table[string] of string &default=(coerce table() to table[string] of string), &optional; policy:hook(rec:any; id:enum Log::ID; filter:<recursion>;) : bool &optional; };) : bool &optional; }));
}{ 
Log::create_stream(Files::LOG, (coerce [$columns=Files::Info, $ev=Files::log_files, $path=files, $policy=Files::log_policy] to record { columns:any; ev:any &optional; path:string &optional; policy:hook(rec:any; id:enum Log::ID; filter:record { name:string; writer:enum Log::Writer &default=Log::default_writer, &optional; path:string &optional; path_func:function(id:enum Log::ID; path:string; rec:any;) : string &optional; include:set[string] &optional; exclude:set[string] &optional; log_local:bool &default=Log::enable_local_logging, &optional; log_remote:bool &default=Log::enable_remote_logging, &optional; field_name_map:table[string] of string &default=Log::default_field_name_map, &optional; scope_sep:string &default=Log::default_scope_sep, &optional; ext_prefix:string &default=Log::default_ext_prefix, &optional; ext_func:function(path:string;) : any &default=Log::default_ext_func, &optional; interv:interval &default=Log::default_rotation_interval, &optional; postprocessor:function(info:record { writer:enum Log::Writer; fname:string; path:string; open:time; close:time; terminating:bool; };) : bool &optional; config:table[string] of string &default=(coerce table() to table[string] of string), &optional; policy:hook(rec:any; id:enum Log::ID; filter:<recursion>;) : bool &optional; };) : bool &optional; }));
}{ 
schedule Broker::log_batch_interval {
Broker::log_flush()
};
Broker::update_metrics_export_interval(Broker::metrics_export_interval, Broker::metrics_export_interval);
Option::set_change_handler(Broker::metrics_export_interval, to_any_coerceBroker::update_metrics_export_interval, (coerce 0 to int));
Broker::update_metrics_export_topic(Broker::metrics_export_topic, Broker::metrics_export_topic);
Option::set_change_handler(Broker::metrics_export_topic, to_any_coerceBroker::update_metrics_export_topic, (coerce 0 to int));
Broker::update_metrics_export_endpoint_name(Broker::metrics_export_endpoint_name, Broker::metrics_export_endpoint_name);
Option::set_change_handler(Broker::metrics_export_endpoint_name, to_any_coerceBroker::update_metrics_export_endpoint_name, (coerce 0 to int));
Broker::update_metrics_export_prefixes(Broker::metrics_export_prefixes, Broker::metrics_export_prefixes);
Option::set_change_handler(Broker::metrics_export_prefixes, to_any_coerceBroker::update_metrics_export_prefixes, (coerce 0 to int));
}ZAM-code zeek_init 
